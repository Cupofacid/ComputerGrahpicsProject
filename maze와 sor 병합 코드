#include <iostream>
#include <GL/freeglut.h>
#include <vector>
#include <cmath>
#include <fstream>
#include "Collision_Detection.h"
#include "Mouse_And_Keyboard_Input.h"
#include "Draw_Maze.h"

// SOR 관련 변수들
std::vector<float> points;                      // 사용자 입력 점들
std::vector<std::vector<float>> meshVertices;   // 생성된 SOR 메쉬 정점
bool isMeshGenerated = false;                   // 메쉬 생성 상태 확인
bool wireframeMode = true;                      // 와이어프레임 모드 활성화
int SOR_SEGMENTS = 36;                          // SOR 회전 분할 수
const float PI = 3.14159265358979323846f;

// SOR 초기화 관련 함수들
void generateSOR() {
    meshVertices.clear();
    if (points.size() < 4) {
        std::cerr << "Error: 최소한 두 개 이상의 점이 필요합니다.\n";
        isMeshGenerated = false;
        return;
    }

    for (int i = 0; i < SOR_SEGMENTS; ++i) {
        float angle = (2.0f * PI * i) / SOR_SEGMENTS;
        float cosTheta = cos(angle);
        float sinTheta = sin(angle);

        for (size_t j = 0; j < points.size(); j += 2) {
            float x = points[j];
            float y = points[j + 1];
            float rotatedX = cosTheta * x;
            float rotatedZ = sinTheta * x;

            meshVertices.push_back({ rotatedX, y, rotatedZ });
        }
    }

    isMeshGenerated = true;
    std::cout << "SOR 메쉬 생성 완료. 총 정점 수: " << meshVertices.size() << "\n";
}

// SOR 그리기 함수
void drawSOR() {
    if (!isMeshGenerated || meshVertices.empty())
        return;

    glPushMatrix();
    glTranslatef(2.0f, 0.0f, -5.0f);  // 미로 내 SOR 위치 설정

    if (wireframeMode) {
        glColor3f(0.0, 0.5, 1.0);
        glBegin(GL_LINES);
        size_t numPoints = points.size() / 2;

        for (int i = 0; i < SOR_SEGMENTS; ++i) {
            for (size_t j = 0; j < numPoints - 1; ++j) {
                const auto& v1 = meshVertices[i * numPoints + j];
                const auto& v2 = meshVertices[(i + 1) % SOR_SEGMENTS * numPoints + j];

                glVertex3f(v1[0], v1[1], v1[2]);
                glVertex3f(v2[0], v2[1], v2[2]);
            }
        }
        glEnd();
    }
    else {
        glColor3f(0.8, 0.2, 0.2);
        glBegin(GL_TRIANGLES);
        size_t numPoints = points.size() / 2;

        for (int i = 0; i < SOR_SEGMENTS; ++i) {
            for (size_t j = 0; j < numPoints - 1; ++j) {
                const auto& v1 = meshVertices[i * numPoints + j];
                const auto& v2 = meshVertices[i * numPoints + j + 1];
                const auto& v3 = meshVertices[(i + 1) % SOR_SEGMENTS * numPoints + j];
                const auto& v4 = meshVertices[(i + 1) % SOR_SEGMENTS * numPoints + j + 1];

                glVertex3f(v1[0], v1[1], v1[2]);
                glVertex3f(v2[0], v2[1], v2[2]);
                glVertex3f(v3[0], v3[1], v3[2]);

                glVertex3f(v2[0], v2[1], v2[2]);
                glVertex3f(v4[0], v4[1], v4[2]);
                glVertex3f(v3[0], v3[1], v3[2]);
            }
        }
        glEnd();
    }
    glPopMatrix();
}

// 미로 초기화 및 렌더링
void initOpenGL() {
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_TEXTURE_2D);

    wallTexture = loadTexture("WallTexture01.jpg");
    floorTexture = loadTexture("WallTexture01.jpg");
    glMatrixMode(GL_PROJECTION);
    gluPerspective(45.0, 1.0, 0.1, 100.0);
    glMatrixMode(GL_MODELVIEW);

    setupLighting();
    createColliders(maze, wallSize);
    glutWarpPointer(centerX, centerY);

    // SOR 초기화용 기본 점들 추가
    points = { -0.5, 0.0, -0.5, 1.0, 0.5, 1.0, 0.5, 0.0 };
    generateSOR();
}

void reshape(int width, int height) {
    // 화면의 비율이 변하지 않도록 설정
    glViewport(0, 0, width, height);  // 윈도우 크기 설정

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    // 새로운 비율에 맞는 투영 설정
    GLfloat aspect = (GLfloat)width / (GLfloat)height;
    gluPerspective(45.0, aspect, 0.1, 100.0);

    glMatrixMode(GL_MODELVIEW);
}
// 메인 디스플레이 함수


int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("3D Maze with SOR");

    initOpenGL();

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutKeyboardUpFunc(keyboardUp);
    glutPassiveMotionFunc(mouseMotion);
    glutIdleFunc(moveCameraAndPlayer);
    glutReshapeFunc(reshape);

    glutMainLoop();
    return 0;
}
